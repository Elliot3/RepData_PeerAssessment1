b - a
?solve
?setmean
?set
?get
?inverse
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
?matrix
makeCacheMatix(as.matrix(2,2,1:4))
makeCacheMatrix(as.matrix(2,2,1:4))
a <- makeCacheMatix(as.matrix(2,2,1:4))
a <- makeCacheMatrix(as.matrix(2,2,1:4))
cacheSolve(a)
a
a
a <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(a)
a <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(a)
a$getinverse()
cacheSolve(a)
a$set(c(0,5,99,66),2,2)
a$set(matrix(c(0,5,99,66),2,2))
cacheSolve(a)
a$get()
a$getinverse()
ls
?set
??set
library(swirl)
swirl()
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect <= 6
num_vect >= 6
my_char <- c("My", "names", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Elliot")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z", ssep = ""))
paste(1:3, c("X", "Y", "Z", sep = ""))
paste(1:3, c("X", "Y", "Z"), sep = ""))
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- (foo = 11, bar = 2, norf = NA)
vect <- (foo = 11, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
wor(5 == 6, !FALSE)
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
?which
which(ints > 7)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
?table
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
?replicate
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
set.seed(1)
rpois(5, 2)
library(datasets)
data(airquality)
setwd("~/Repository/Coursera/RepData_PeerAssessment1")
data <- read.csv("activity.csv", header=TRUE)
data2 <- data[complete.cases(data),]
head(data2)
stepsPerDay <- tapply(data$steps, data$date, mean)
stepsPerDay
stepsPerDay <- as.data.frame(tapply(data$steps, data$date, mean))
stepsPerDay
?rbind
colNames <- c("Date", "Average Number of Steps")
stepsPerDay <- rbind(colNames, stepsPerDay)
stepsPerDay
colnames(stepPerDay) <- c("Date", "Average Number of Steps")
colnames(stepsPerDay) <- c("Date", "Average Number of Steps")
stepsPerDay
data <- read.csv("activity.csv", header=TRUE)
data2 <- data[complete.cases(data),]
stepsPerDay <- as.data.frame(tapply(data$steps, data$date, mean))
?aggregate
data <- read.csv("activity.csv", header=TRUE)
head(data)
stepsPerDay <- aggregate(data, steps~date, sum)
stepsPerDay <- aggregate(data, steps~date, FUN=sum)
stepsPerDay <- aggregate(data=data, by=steps~date, FUN=sum)
stepsPerDay <- aggregate(x=data, by=steps~date, FUN=sum)
stepsPerDay <- aggregate(steps~date, data, sum)
stepsPerDay <- aggregate(x=steps~date, data=data, FUN=sum)
stepsPerDay <- aggregate(by=steps~date, data=data, FUN=sum)
stepsPerDay <- aggregate(formula=steps~date, data=data, FUN=sum)
head(stepsPerDay)
stepsPerDay <- aggregate(formula=steps~date, data=data, FUN=sum, na.rm=TRUE)
head(stepsPerDay)
?hist
hist(stepsPerDay)
class(stepsPerDay)
sapply(stepsPerDay, class)
hist(stepsPerDay$steps)
hist(stepsPerDay$steps, xlab="Steps per Day", ylab="Frequency in Days", main="Frequency of Steps per Day")
hist(stepsPerDay$steps, xlab="Steps per Day", ylab="Frequency",
main="Frequency of Steps per Day")
?sapply
meanStepsPerDay <- sapply(stepsPerDay$steps, mean)
meanStepsPerDay
?mean
meanStepsPerDay <- mean(stepsPerDay)
meanStepsPerDay <- mean(stepsPerDay, na.rm=TRUE)
meanStepsPerDay <- mean(as.numeric(stepsPerDay))
stepsPerDay
sapply(stepsPerDay, class)
meanStepsPerDay <- mean(as.numeric(stepsPerDay$steps))
meanStepsPerDay <- mean(stepsPerDay$steps)
medianStepsPerDay <- median(stepsPerDay$steps)
meanStepsPerDay <- mean(data$steps)
meanStepsPerDay <- mean(data$steps, na.rm=TRUE)
medianStepsPerDay <- median(data$steps, na.rm=TRUE)
?median
meanStepsPerDay <- mean(stepsPerDay$steps, na.rm=TRUE)
medianStepsPerDay <- median(stepsPerDay$steps, na.rm=TRUE)
medianStepsPerDay
head(data)
head(data$interval == 5)
head(data, 40)
averageStepsPerInterval <- aggregate(forumla=steps~interval, data=data,
FUN=mean)
averageStepsPerInterval <- aggregate(formula=steps~interval, data=data,
FUN=mean)
head(averageStepsPerInterval)
plot(averageStepsPerInterval, type="l")
?which.max
averageStepsPerInterval$interval[which.max(averageStepsPerInterval$steps)]
head(data)
?sumif
?sum
?is.na
sum(is.na(data$steps))
averageSteps <- sapply(data, data$steps, na.rm=TRUE)
averageSteps <- mean(data$steps, na.rm=TRUE)
data2 <- data[data==NA] <- averageSteps
head(data2)
data2 <- (data[data==NA]<-averageSteps)
data2 <- data
data2[data2==NA] <- averageSteps
head(data2)
data2[data2=="NA"] <- averageSteps
head(data2)
tail(data, 20)
tail(data, 200)
tail(data, 500)
data[data==NA] <- averageSteps
head(data)
data[data=="NA"] <- averageSteps
head(data)
data$steps[data$steps=="NA"] <- averageSteps
head(data)
data$steps[data$steps==NA] <- averageSteps
head(data)
data[is.na(data)] <- averageSteps
head(data)
stepsPerDayNA <- aggregate(formula=steps~date, data=data, FUN=sum, na.rm=TRUE)
hist(stepsPerDayNA$steps, xlab="Steps per Day", ylab="Frequency",
main="Frequency of Steps per Day")
meanStepsPerDayNA <- mean(stepsPerDayNA$steps)
medianStepsPerDayNA <- median(stepsPerDayNA$steps)
names(stepsperdayna)
colnames(stepsPerDayNA)
head(stepsPerDayNA)
stepsPerDayNA <- aggregate(formula=steps~date, data=data, FUN=sum, na.rm=TRUE)
head(data)
stepsPerDayNA <- aggregate(formula=steps~date, data=data, FUN=sum, na.rm=TRUE)
stepsPerDayNA$dayType <- as.POSIXlt(stepsPerDayNA$date)$wday
stepsPerDayNA
?replace
replace(stepsPerDayNA$dayType, stepsPerDayNA$dayType==0, "Weekend")
replace(stepsPerDayNA$dayType, stepsPerDayNA$dayType==1, "Weekday")
replace(stepsPerDayNA$dayType, stepsPerDayNA$dayType==2, "Weekday")
replace(stepsPerDayNA$dayType, stepsPerDayNA$dayType==3, "Weekday")
replace(stepsPerDayNA$dayType, stepsPerDayNA$dayType==4, "Weekday")
replace(stepsPerDayNA$dayType, stepsPerDayNA$dayType==5, "Weekday")
replace(stepsPerDayNA$dayType, stepsPerDayNA$dayType==6, "Weekend")
tepsPerDayNA$dayType <- replace(stepsPerDayNA$dayType,
stepsPerDayNA$dayType==0, "Weekend")
stepsPerDayNA$dayType <- replace(stepsPerDayNA$dayType,
stepsPerDayNA$dayType==1, "Weekday")
stepsPerDayNA$dayType <- replace(stepsPerDayNA$dayType,
stepsPerDayNA$dayType==2, "Weekday")
stepsPerDayNA$dayType <- replace(stepsPerDayNA$dayType,
stepsPerDayNA$dayType==3, "Weekday")
stepsPerDayNA$dayType <- replace(stepsPerDayNA$dayType,
stepsPerDayNA$dayType==4, "Weekday")
stepsPerDayNA$dayType <- replace(stepsPerDayNA$dayType,
stepsPerDayNA$dayType==5, "Weekday")
stepsPerDayNA$dayType <- replace(stepsPerDayNA$dayType,
stepsPerDayNA$dayType==6, "Weekend")
stepsPerDayNA$dayType <- replace(stepsPerDayNA$dayType,
stepsPerDayNA$dayType==0, "Weekend")
stepsPerDayNA$dayType <- replace(stepsPerDayNA$dayType,
stepsPerDayNA$dayType==1, "Weekday")
stepsPerDayNA$dayType <- replace(stepsPerDayNA$dayType,
stepsPerDayNA$dayType==2, "Weekday")
stepsPerDayNA$dayType <- replace(stepsPerDayNA$dayType,
stepsPerDayNA$dayType==3, "Weekday")
stepsPerDayNA$dayType <- replace(stepsPerDayNA$dayType,
stepsPerDayNA$dayType==4, "Weekday")
stepsPerDayNA$dayType <- replace(stepsPerDayNA$dayType,
stepsPerDayNA$dayType==5, "Weekday")
stepsPerDayNA$dayType <- replace(stepsPerDayNA$dayType,
stepsPerDayNA$dayType==6, "Weekend")
stepsPerDayNA
plot(aggregate(steps~interval+dayType, stepsPerDayNA, mean))
stepsPerDay <- aggregate(formula=steps~date, data=data, FUN=sum, na.rm=TRUE)
?aggregate
data <- read.csv("activity.csv", header=TRUE)
